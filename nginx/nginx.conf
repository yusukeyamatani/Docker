user  nginx;

#CPU のコア数と同じに設定
#http://yasainet.net/archives/164
worker_processes  1;

#dockerではコマンドをforegroundで動かさないとコンテナが停止してしまいます。 nginxはデフォルトはデーモンとして動くので、foregroundで動くように設定しましょう。
#http://heartbeats.jp/hbblog/2014/07/3-tips-for-nginx-on-docker.html
daemon off;

#エラーログの出力先のファイル名とロギングのレベルを指定 (warnと指定した場合warn以上が対象となる)
#http://heartbeats.jp/hbblog/2012/02/nginx03.html
error_log  /var/log/nginx/error.log warn;

#ngnxのメイン(親)プロセスのPIDを保存しておく場所
#$ cat /var/run/nginx.pid -> 31068
#pstree ->├─supervisord(31067)─┬─nginx(31068)───nginx(31070)
pid        /var/run/nginx.pid;

#プロセス毎のファイルディスクリプタ上限数を指定
#http://www.1x1.jp/blog/2013/02/nginx_too_many_open_files_error.html
worker_rlimit_nofile  4096;

events {
	#worker_connectionsディレクティブは一つのworkerプロセスが同時に処理できる最大コネクション数を設定します
    worker_connections  1024;
    
    #epoll を使用の有無、デフォルトはselect
    #http://gintec.hatenablog.com/entry/2015/09/13/195121
    use epoll;
    
    #on の場合、複数の接続をすべて 1 度に受け入れる。
    #http://www.karakaram.com/onamae-com-vps10-nginx-wordpress
    multi_accept on;
}


http {
	#HTTPレスポンスヘッダーにnginxのバージョン番号を含まない様にする
	#https://havelog.ayumusato.com/develop/server/e202-nginx_hide_version.html
    server_tokens off;
    
    #mime.typesはMIMEタイプと拡張子のマッピングを設定します
    #http://heartbeats.jp/hbblog/2012/02/nginx03.html
    include       /etc/nginx/mime.types;
    
    #default_typeディレクティブではレスポンスのデフォルトのMIMEタイプを設定します。上述のmime.typesで拡張子からMIMEタイプを決定できなかったときに、ここで指定したMIMEタイプが適応されます
    #application/octet-streamはファイルの種別が判別出来ない場合に付けられるフィルタイプ
    #http://heartbeats.jp/hbblog/2012/02/nginx03.html
    default_type  application/octet-stream;

    #GeoIPはIPアドレスから地理情報を取得するサービス
    # http://strix01.blogspot.jp/2013/12/nginxhttpgeoipmoduleip.html
    geoip_country /usr/local/share/GeoIP/GeoIP.dat;
    geoip_city    /usr/local/share/GeoIP/GeoLiteCity.dat;

   
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" $request_time';

    log_format ltsv_gumi "host:" "$remote_addr" "\t"                              # リモートアドレス
                         "user:" "$remote_user" "\t"                              # user名
                         "time:" "$time_local" "\t"                               # アクセス時刻
                         "method:" "$request_method" "\t"                         # リクエストメソッド
                         "path:" "$request_uri" "\t"                              # コールされたパス(ドメイン除く)
                         "code:" "$status" "\t"                                   # レスポンスコード
                         "size:" "$body_bytes_sent" "\t"                          # 返送サイズ
                         "referer:" "$http_referer" "\t"                          # アクセス元リファラ
                         "agent:" "$http_user_agent" "\t"                         # ユーザーエージェント
                         "x_forward:" "$http_x_forwarded_for" "\t"                # ユーザーアクセス元IP
                         "response_time:" "$upstream_response_time" "\t"          # リクエスト処理時間
                         "msec:" "$msec" "\t"                                     # アクセス時刻(msec)
                         "reqtime:" "$request_time" "\t"                          # リクエストを受け取るまでの時間
                         "cache:" "$upstream_http_x_cache" "\t"
                         "runtime:" "$upstream_http_x_runtime" "\t"
                         "vhost:" "$host" "\t"                                    # リクエストされたホスト名
                         "geoip_country_name:" "$geoip_city_country_name" "\t"    # 国名
                         "geoip_country_code3:" "$geoip_city_country_code3" "\t"  # JPN/USAとか
                         "geoip_city:" "$geoip_city" "\t"                         # 都市名
                         "geoip_latitude:" "$geoip_latitude" "\t"                 # 緯度
                         "geoip_longitude:" "$geoip_longitude"                    # 軽度
                         ;
	#pathに対してlogのformatを割り当てる
	#http://www.mk-mode.com/octopress/2013/01/16/nginx-access-log/
    access_log  /var/log/nginx/access.log  ltsv_gumi;
　
　#sendfile()を使うとカーネル空間内でファイルの読み込みと送信が完了するため、効率良くファイルの内容をクライアントに送信できます
　#sendfile()とは: http://kazmax.zpp.jp/cmd/s/sendfile.2.html
　#http://heartbeats.jp/hbblog/2012/02/nginx03.html
    sendfile        on;
    
    #nginxはデフォルトでファイルを送り出す際にsendfileシステムコールを使いますが、sendfileの前に動くHTTPヘッダのパケット書き出しを遅延させ、ヘッダとファイルの中身を一度に送り出すように調整します
    #http://blog.nomadscafe.jp/2013/09/benchmark-g-wan-and-nginx.html
    #tcp_nopush     on;

    #HTTP の持続的な接続で次のリクエストが来るまでサーバが待つ時間（秒）を設定します。 keepalive_timeout = 0 の時は、KeepAlive無効となります。
    #http://server-setting.info/centos/nginx-keepalive-setting.html
    keepalive_timeout  60;
	
    #コンテンツを gzip 圧縮で送ることでデータ量を減らす
    #https://ez-net.jp/article/BD/TMzIuW9N/SZmJB8EKtOvL/
    #gzip  on;

    # add
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Forwarded-For  $remote_addr;
    proxy_set_header Host             $host;

    proxy_buffering     on;
    proxy_buffer_size   16k;
    proxy_buffers       32   16k;
    proxy_busy_buffers_size 64k;

    #include app conf
    include /etc/nginx/server.d/*.conf;
}